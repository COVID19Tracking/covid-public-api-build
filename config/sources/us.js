const { DateTime } = require('luxon')
const objectHash = require('object-hash')

module.exports = {
  schema: 'Us',
  formats: ['json', 'csv'],
  path: 'us/daily.{format}',
  tags: ['US Current and Historical Data'],
  description: 'US historic values.',
  sheetId: '18oVRrHj3c183mHmq3m89_163yuYltLNlOmPerQ18E8w',
  worksheetId: '964640830',
  subDefinitions: [
    {
      key: 'usCurrent',
      schema: 'Us',
      path: 'us/current.{format}',
      tags: ['US Current and Historical Data'],
      description: 'US current values.',
    },
    {
      key: 'usDates',
      schema: 'Us',
      path: 'us/{date}.{format}',
      tags: ['US Current and Historical Data'],
      description: 'US current values.',
      parameters: [
        {
          name: 'date',
          in: 'path',
          required: true,
          style: 'simple',
          explode: false,
          schema: {
            type: 'string',
            example: '20200501',
          },
          description:
            'Use the ISO-formatted date, without hyphens, to select just the data for a specific date.',
        },
      ],
    },
  ],
  fieldDefinitions: [
    {
      source: 'Date',
      target: 'date',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: false,
      example: 20200501,
    },
    {
      source: 'States',
      target: 'states',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: false,
      example: 50,
    },
    {
      source: 'Positive',
      target: 'positive',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },

    {
      source: 'Negative',
      target: 'negative',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },
    {
      source: 'Pending',
      target: 'pending',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },
    {
      source: 'Hospitalized – Currently',
      target: 'hospitalizedCurrently',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },
    {
      source: 'Hospitalized – Cumulative',
      target: 'hospitalizedCumulative',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },
    {
      source: 'In ICU – Currently',
      target: 'inIcuCurrently',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },
    {
      source: 'In ICU – Cumulative',
      target: 'inIcuCumulative',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },
    {
      source: 'On Ventilator – Currently',
      target: 'onVentilatorCurrently',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },
    {
      source: 'On Ventilator – Cumulative',
      target: 'onVentilatorCumulative',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },

    {
      source: 'Recovered',
      target: 'recovered',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },
    {
      source: 'Date',
      target: 'dateChecked',
      type: 'string',
      graphQlType: 'String',
      description: '',
      nullable: true,
      example: 50,
      format: (date) =>
        DateTime.fromFormat(date || 'now', 'M/d/yyyy HH:mm')
          .setZone('UTC')
          .toFormat(`yyyy-LL-dd'T'TT'Z'`),
    },
    {
      source: 'Deaths',
      target: 'death',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },
    {
      source: 'Hospitalized – Cumulative',
      target: 'hospitalized',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
    },
    {
      source: 'total',
      target: 'total',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
      sourceFunction: (item) => item.positive + item.negative + item.pending,
    },
    {
      source: 'totalTestResults',
      target: 'totalTestResults',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
      sourceFunction: (item) => item.positive + item.negative,
    },
    {
      source: 'posNeg',
      target: 'posNeg',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
      sourceFunction: (item) => item.positive + item.negative,
    },
    {
      source: 'deathIncrease',
      target: 'deathIncrease',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
      sourceFunction: (item) => 0,
    },
    {
      source: 'hospitalizedIncrease',
      target: 'hospitalizedIncrease',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
      sourceFunction: (item) => 0,
    },
    {
      source: 'negativeIncrease',
      target: 'negativeIncrease',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
      sourceFunction: (item) => 0,
    },
    {
      source: 'positiveIncrease',
      target: 'positiveIncrease',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
      sourceFunction: (item) => 0,
    },
    {
      source: 'totalTestResultsIncrease',
      target: 'totalTestResultsIncrease',
      type: 'integer',
      graphQlType: 'Int',
      description: '',
      nullable: true,
      example: 50,
      sourceFunction: (item) => 0,
    },
    {
      source: 'hash',
      target: 'hash',
      type: 'string',
      graphQlType: 'String',
      description: 'A hash for this record',
      nullable: false,
      example: 50,
      sourceFunction: (item) => objectHash(item),
    },
  ],
}
